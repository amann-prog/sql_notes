create table emp(empno number, ename varchar2(20), age number check(age>=18 and age <=60));

insert into emp values (101, 'Aliva', 21);
insert into emp values (102, 'Babita', 32);

select * from emp;

insert into emp values (103, 'Chetan', 15);
insert into emp values (103, 'Deepak', 62);

insert into emp(empno) values(103);
insert into emp(empno, age) values(104, 40);

Alter table emp modify ename varchar2(20) default 'Unknown';

desc emp;

insert into emp(empno, age) values(105, 42);

select * from emp;

insert into emp values(106, 'Elsa', 41);

insert into emp values(107, Null, 38);

----------------------------------------------------------------------------
-- index
select * from emp;

select * from user_indexes;

CREATE INDEX emp_age_idx on emp(age);   -- non-unique index

CREATE UNIQUE INDEX emp_id_idx on emp(empno);  -- unique index

CREATE index emp_comp_idx on emp(age, ename);   -- composite index

-------------------------------------------------------------------------
-- Synonym

select * from user_synonyms;

CREATE SYNONYM emp_tbl for emp;

select * from emp_tbl;

select * from emp;

select e.* from emp e;

select * from e;

update emp_tbl set ename='Dnyanesh', age=33 where empno=103;

select * from emp;

select * from user_indexes;
select * from user_synonyms;

drop table emp;

drop synonym emp_tbl;

-----------------------------------------------------------------

-- Select Statement

-- simplest select query, no filter onm rows and columns
SELECT * FROM SCOTT.EMP;

-- filter the rows, where clause
SELECT * FROM SCOTT.EMP WHERE DEPTNO=30;

-- filter the columns, instead of writing * in the select clause mention names of required columns
SELECT EMPNO, ENAME, JOB, SAL FROM SCOTT.EMP;

-- filtering rows and columns both
SELECT EMPNO, ENAME, JOB, SAL FROM SCOTT.EMP WHERE DEPTNO=10;

-- where : to apply the filter on rows   --> selection
-- select : to apply the filter on columns (* for selecting all columns)  --> projection 

-- display the empno, ename and sal for the employees getting sal more than 2000
select empno, ename, sal from scott.emp where sal > 2000;

-- display the list of people who are working as manager
select * from scott.emp where job='MANAGER'

-- who all joined after 31st Dec 1981.
select * from scott.emp where hiredate > '31-DEC-1981';

SELECT sysdate from dual;

-- list of emps working in dept 10 and dept 20
SELECT ENAME from scott.emp where deptno=10 or deptno=20;
SELECT ENAME FROM SCOTT.EMP WHERE DEPTNO IN(10, 20);
SELECT ENAME FROM SCOTT.EMP WHERE DEPTNO = ANY(10, 20);

-- list of people who are not eligible for commission
SELECT * FROM SCOTT.EMP WHERE COMM = NULL;   -- not a correct way for null based comparison
SELECT * FROM SCOTT.EMP WHERE COMM IS NULL;

-- list of people who are eligible for commission
SELECT * FROM SCOTT.EMP WHERE COMM IS NOT NULL;

-- people working as Analysts and getting sal above 2000
SELECT * from scott.emp where job='ANALYST' AND sal>2000;

-- who all are getting sal in the range of 1000 and 2000 (both inclusive)
SELECT * FROM SCOTT.EMP WHERE SAL >= 1000 and sal <= 2000;
select * from scott.emp where sal BETWEEN 1000 AND 2000;

-- all the employees whose name is starting with A
SELECT * from scott.emp where ename like 'A%'

-- all the employees whose name is ending with E
SELECT * from scott.emp where ename like '%E'

-- employees having second char as A in their name
SELECT * from scott.emp where ename like '_A%'

-- employees getting sal greater than FORD AND MILLER
select * FROM SCOTT.EMP WHERE SAL > ALL(1300, 3000);

-- employees getting sal greater than FORD or MILLER
select * FROM SCOTT.EMP WHERE SAL > ANY(1300, 3000);



SELECT E.ENAME, E.JOB, E.DEPTNO FROM SCOTT.EMP E;

SELECT ENAME EMP_NAME, JOB JOB_DESCRIPTION, DEPTNO DEPARTMENT_NUMBER FROM SCOTT.EMP;

SELECT ENAME AS EMP_NAME, JOB AS JOB_DESCRIPTION, DEPTNO AS DEPARTMENT_NUMBER FROM SCOTT.EMP;

SELECT DEPTNO, ENAME, JOB, SAL FROM SCOTT.EMP; 

SELECT DEPTNO, ENAME, JOB, SAL FROM SCOTT.EMP ORDER BY SAL ASC;

SELECT DEPTNO, ENAME, JOB, SAL FROM SCOTT.EMP ORDER BY SAL DESC;

SELECT DEPTNO, ENAME, JOB, SAL FROM SCOTT.EMP ORDER BY DEPTNO DESC, SAL DESC;

-- Summary: Select Statement
	-- Clauses : SELECT --> FROM --> WHERE --> ORDER BY
	-- Where --> filter condition for the rows/records
		-- diff. operators : in, any, all, between, like, comparison ops(=, <, >, <=, >=, != , <>), is null, is not null, and, or

------------------------------------------------------------------------------------------------
-- Single row functions
-- String Functions

SELECT ename, length(ename) from scott.emp;

SELECT ename, job, concat(ename, job) from scott.emp;

SELECT ename, job, concat(ename, ' ', job) from scott.emp;  --error

SELECT ename, job, concat(ename, concat(' ', job)) from scott.emp;
SELECT ename, job, concat(concat(ename, ' '), job) from scott.emp;
SELECT ename, job, ename || ' is a ' || job as Emp_info from scott.emp;

select upper('deloitte') from dual;

select lower('DELOITTE') from dual;

select initcap('deloitte') from dual;

select ltrim('    Welcome to Deloitte    ') from dual;

select rtrim('    Welcome to Deloitte    ') from dual;

select trim('    Welcome to Deloitte    ') from dual;

select ltrim('#####Welcome to Deloitte#####', '#') from dual;

select rtrim('#####Welcome to Deloitte#####', '#') from dual;

select trim('#####Welcome to Deloitte#####', '#') from dual;  -- error

select ename, lpad(ename, 10, '#') from scott.emp; 
select ename, rpad(ename, 10, '#') from scott.emp;

-- what id original strings are having more characters than mentioned length?
select ename, lpad(ename, 5, '#') from scott.emp; 
select ename, rpad(ename, 5, '#') from scott.emp;

select ename, replace(ename, 'A', 'B') from scott.emp;

SELECT ename, substr(ename, 1, 3) from scott.emp;
SELECT ename, substr(ename, 2, 5) from scott.emp;
SELECT ename, substr(ename, 1, 3) from scott.emp;

SELECT ename, instr(ename, 'A') from scott.emp;
SELECT ename, instr(ename, 'A', 3) from scott.emp;
SELECT ename, instr(ename, 'A', 2, 2) from scott.emp;

-- Summary --> String Functions: length, concat, upper, lower, initcap, lpad, rpad, ltrim, rtrim, trim, replace, substr, instr

-- General Functions 
-- nvl: takes 2 parameters, if first is null then returns 2nd value, else returns 1st value
select nvl(10, 20) from dual;
select nvl(NULL, 20) from dual;

select sal, comm, sal+nvl(comm, 0) as gross_sal from scott.emp;

SELECT nvl2(10, 'Not null', 'Null') from dual;
SELECT nvl2(NULL, 'Not null', 'Null') from dual;

SELECT comm, nvl2(comm, 'Eligible for Comm', 'Not eligible for Comm') as comm_comment from scott.emp;

SELECT nullif(10, 10) from dual;
SELECT nullif(10, 20) from dual;

SELECT ename, deptno, decode(deptno, 10, 'Works for dept 10', 'Works for other dept') dept_comment from scott.emp;

SELECT ename, deptno, sal,
	CASE deptno
	WHEN 10 THEN 'Works for Dept 10'
	WHEN 20 THEN 'Works for Dept 20'
	WHEN 30 THEN 'Works for Dept 30'
	else  'Works for other dept'
 	END as dept_comment
FROM SCOTT.EMP;

SELECT ename, deptno, sal,
	CASE 
	WHEN deptno = 10 THEN 'Works for Dept 10'
	WHEN deptno = 20 THEN 'Works for Dept 20'
	WHEN deptno = 30 THEN 'Works for Dept 30'
	else  'Works for other dept'
 	END as dept_comment
FROM SCOTT.EMP;

SELECT ename, deptno, sal,
	CASE
	WHEN sal< 1000 THEN 'Needs more money'
	WHEN sal<2000 THEN 'Just Okay'
	WHEN sal<3000 THEN 'Good Salary'
	else  'High Salary'
 	END as salary_comment
FROM SCOTT.EMP;

SELECT comm, sal, coalesce(comm, sal) from scott.emp;
SELECT coalesce(null, null, null, 10, null, 20, null, 20, 30) from dual;

-- nvl : takes 2 arguments and checks if first  argument is null or not, if it is null returns 2nd argument otherwise returns first agrument
-- nvl2: takes 3 arguments, if 1st argument is not null then returns 2nd parameter otherwise returns 3rd parameter
-- nullif : takes 2 paramters, if they are equal then returns null, other wise returns 1st parameter 
-- coalesce: taken n number of parameters and returns first non null value froom that sequence 

select ename from scott.emp where regexp_like(ename, '^A');
select ename from scott.emp where regexp_like(ename, 'E$');
select ename from scott.emp where regexp_like(ename, '^.A');
select ename from scott.emp where regexp_like(ename, '.A');

SELECT * from scott.emp;

select ename from scott.emp where regexp_like(ename, 'T*')
select ename from scott.emp where regexp_like(ename, 'T+')
select ename from scott.emp where regexp_like(ename, 'T?')
select ename from scott.emp where regexp_like(ename, '[ABC]')



SELECT ename, regexp_replace(ename, '[A-H]', 'Z') from scott.emp;

--------------
-- Number functions
select mod(10, 2) from dual;
select mod(2, 10) from dual;

select mod(10, 3) from dual;

select abs(10) from dual;
select abs(-10) from dual;

select power(10, 3) from dual;

select round(10.1234) from dual;
select round(10.5234) from dual;
select round(10.1234, 2) from dual;
select round(1234.1234, -2) from dual;

select trunc(10.1234) from dual;
select trunc(10.9234) from dual;
select trunc(1234.1234, 2) from dual;
select trunc(1234.1234, -2) from dual;

select floor(10.1) from dual;
select floor(10.9) from dual;

select ceil(10.1) from dual;
select ceil(10.9) from dual;

-- Summanry: Number functions --> mod, abs, power, round, floor, ceil, trunc














