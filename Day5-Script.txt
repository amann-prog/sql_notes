CREATE SEQUENCE SEQ_DEMO
START WITH 1
INCREMENT BY 1
MAXVALUE 5
NOCYCLE
NOCACHE;

SELECT SEQ_DEMO.NEXTVAL FROM DUAL;

DROP SEQUENCE SEQ_DEMO;


CREATE SEQUENCE SEQ_DEMO
START WITH 1
INCREMENT BY 1
MAXVALUE 5
CYCLE
NOCACHE;

SELECT SEQ_DEMO.NEXTVAL FROM DUAL;

CREATE SEQUENCE SEQ_DEMO
START WITH 3
INCREMENT BY 1
MINVALUE 1
MAXVALUE 5
CYCLE
NOCACHE;

SELECT SEQ_DEMO.NEXTVAL FROM DUAL;


CREATE SEQUENCE SEQ_DEMO
INCREMENT BY -1
MINVALUE 1
MAXVALUE 5
CYCLE
NOCACHE;

SELECT SEQ_DEMO.NEXTVAL FROM DUAL;

CREATE SEQUENCE SEQ_DEMO
INCREMENT BY -1
MINVALUE 1
MAXVALUE 5
CYCLE
CACHE 2;


CREATE TABLE ORDER_DATA(ORDER_ID VARCHAR(10), CUST_ID NUMBER, ORDER_AMT NUMBER);
CREATE SEQUENCE ORDER_ID_SEQ
INCREMENT BY 1
MINVALUE 1
MAXVALUE 500
NOCYCLE
NOCACHE;

INSERT INTO ORDER_DATA VALUES('ORD' || ORDER_ID_SEQ.NEXTVAL, 1001, 1200.50);
INSERT INTO ORDER_DATA VALUES('ORD' || ORDER_ID_SEQ.NEXTVAL, 1002, 1300.50);
INSERT INTO ORDER_DATA VALUES('ORD' || ORDER_ID_SEQ.NEXTVAL, 1001, 1250.00);

SELECT * FROM ORDER_DATA;


SELECT * FROM USER_TABLES;
SELECT * FROM ALL_TABLES;

SELECT * FROM USER_TAB_COLUMNS;

SELECT * FROM USER_CONSTRAINTS;

ALTER TABLE ORDER_DATA MODIFY ORDER_ID VARCHAR(10) PRIMARY KEY;
SELECT * FROM USER_CONSTRAINTS;

SELECT * FROM USER_INDEXES;
SELECT * FROM USER_IND_COLUMNS;

SELECT * FROM USER_VIEWS;

CREATE VIEW VIEW_DEMO AS SELECT * FROM ORDER_DATA;
SELECT * FROM USER_VIEWS;


SELECT * FROM USER_SEQUENCES;
SELECT * FROM USER_SYNONYMS;

============================================================
-- PL-SQL

DECLARE
    NUM1 NUMBER := 100;
	NUM2 NUMBER := 200;
	NUM3 NUMBER; 
BEGIN 
    NUM3 := NUM1 + NUM2; 
	DBMS_OUTPUT.PUT_LINE('ADITION OF NUM1 AND NUM2 IS: ' || NUM3);
END;

DECLARE 
	V_EMPNO NUMBER := 7566;
	V_ENAME VARCHAR2(20);
	V_SALARY NUMBER;
BEGIN
	SELECT ENAME, SAL INTO V_ENAME, V_SALARY FROM SCOTT.EMP WHERE EMPNO=V_EMPNO;
	DBMS_OUTPUT.PUT_LINE('NAME OF THE PERSON IS: ' || V_ENAME);
	DBMS_OUTPUT.PUT_LINE('SALARY OF THE PERSON IS: ' || V_SALARY);
END;

-- CREATING STATIC PROCEDURE (HAS NO PARAMETERS)
CREATE OR REPLACE PROCEDURE PROC1 AS
BEGIN
	DBMS_OUTPUT.PUT_LINE('THIS MESSAGE IS PRINED FROM PROC1..!!');
END PROC1;

-- CALLING A PROCEDURE
EXECUTE PROC1;
EXEC PROC1;

-- CREATING PROCEDURE WITH PARAMETER
CREATE OR REPLACE PROCEDURE GET_EMP_INFO(P_EMPNO IN NUMBER) AS
	V_EMPNO NUMBER := P_EMPNO;
	V_ENAME VARCHAR2(20);
	V_SALARY NUMBER;
BEGIN
	SELECT ENAME, SAL INTO V_ENAME, V_SALARY FROM SCOTT.EMP WHERE EMPNO=V_EMPNO;
	DBMS_OUTPUT.PUT_LINE('NAME OF THE PERSON IS: ' || V_ENAME);
	DBMS_OUTPUT.PUT_LINE('SALARY OF THE PERSON IS: ' || V_SALARY);
END;

EXEC GET_EMP_INFO(7839);




CREATE OR REPLACE PROCEDURE GET_EMP_INFO2(P_EMPNO IN NUMBER, P_ENAME OUT VARCHAR2, P_SALARY OUT NUMBER) AS
BEGIN
	SELECT ENAME, SAL INTO P_ENAME, P_SALARY FROM SCOTT.EMP WHERE EMPNO=P_EMPNO;
END;

DECLARE
    A VARCHAR2(20);
	B NUMBER;
BEGIN
	GET_EMP_INFO2(7566, A, B);
	DBMS_OUTPUT.PUT_LINE('NAME OF THE PERSON IS: ' || A);
	DBMS_OUTPUT.PUT_LINE('SALARY OF THE PERSON IS: ' || B);
END;

CREATE PROCEDURE INOUT_DEMO(TEXT IN OUT VARCHAR2) AS
BEGIN
	TEXT := CONCAT('I LOVE ', TEXT);
END;

DECLARE
    RESULT VARCHAR2(20) := 'PYTHON';
BEGIN
    DBMS_OUTPUT.PUT_LINE(RESULT);
	INOUT_DEMO(RESULT);
	DBMS_OUTPUT.PUT_LINE(RESULT);
END;

DESC INOUT_DEMO;
DESC GET_EMP_INFO2;

DROP PROCEDURE INOUT_DEMO;

CREATE OR REPLACE FUNCTION MY_FIRST_FUNCTION(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER AS
    NUM3 NUMBER;
    BEGIN
		NUM3:= NUM1 + NUM2;
		RETURN NUM3;
	END;

DECLARE
	RESULT NUMBER;
BEGIN
	RESULT := MY_FIRST_FUNCTION(10, 20);
	DBMS_OUTPUT.PUT_LINE(RESULT);
END;
	
CREATE OR REPLACE FUNCTION MY_FIRST_FUNCTION(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER AS
    NUM3 NUMBER;
BEGIN
		NUM3:= NUM1 + NUM2;
		DBMS_OUTPUT.PUT_LINE(NUM3);
	RETURN 0;
END;

DECLARE
    A NUMBER;
BEGIN
  A := MY_FIRST_FUNCTION(10, 20);
END;



--CURSOR
DECLARE
    v_record SCOTT.emp%rowtype;
    CURSOR emp_cursor IS SELECT * FROM SCOTT.emp;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor into v_record;
        DBMS_OUTPUT.PUT_LINE('ID of Employee is: ' || v_record.empno);
        DBMS_OUTPUT.PUT_LINE('Name of Employee is: ' || v_record.ename);
		DBMS_OUTPUT.PUT_LINE(' ');
        EXIT WHEN emp_cursor%NOTFOUND;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Total Number of Rows returned by cursor: ' || emp_cursor%rowcount);
    
    CLOSE emp_cursor;
END;

--TRIGGER
create or replace trigger emp_trig before insert or update or delete on emp
declare
v_day char(3):=upper(to_char(sysdate, 'dy'));
-- v_day NUMBER:=TO_NUMBER(to_char(sysdate, 'DD'));  -- LOGIC FOR GETTING MONTH DAY
begin
	if v_day='FRI' then
		raise_application_error(-20008, 'Manipulation on EMP table is not allowed on FRIDAY..!!');
	end if;
end;




